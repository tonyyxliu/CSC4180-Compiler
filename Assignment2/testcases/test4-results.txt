TINT int
ID binary_gcd
LPAREN (
TINT int
ID x
COMMA ,
TINT int
ID y
RPAREN )
LBRACE {
IF if
LPAREN (
ID x
EQ ==
ID y
RPAREN )
LBRACE {
RETURN return
ID x
SEMICOLON ;
RBRACE }
IF if
LPAREN (
ID x
EQ ==
INTLITERAL 0
RPAREN )
LBRACE {
RETURN return
ID y
SEMICOLON ;
RBRACE }
IF if
LPAREN (
ID y
EQ ==
INTLITERAL 0
RPAREN )
LBRACE {
RETURN return
ID x
SEMICOLON ;
RBRACE }
IF if
LPAREN (
LPAREN (
TILDE ~
ID x
BAND [&]
INTLITERAL 1
RPAREN )
EQ ==
INTLITERAL 1
RPAREN )
LBRACE {
IF if
LPAREN (
LPAREN (
ID y
BAND [&]
INTLITERAL 1
RPAREN )
EQ ==
INTLITERAL 1
RPAREN )
LBRACE {
RETURN return
ID binary_gcd
LPAREN (
ID x
RLSHIFT >>
INTLITERAL 1
COMMA ,
ID y
RPAREN )
SEMICOLON ;
RBRACE }
ELSE else
LBRACE {
RETURN return
ID binary_gcd
LPAREN (
ID x
RLSHIFT >>
INTLITERAL 1
COMMA ,
ID y
RLSHIFT >>
INTLITERAL 1
RPAREN )
LSHIFT <<
INTLITERAL 1
SEMICOLON ;
RBRACE }
RBRACE }
IF if
LPAREN (
LPAREN (
TILDE ~
ID y
BAND [&]
INTLITERAL 1
RPAREN )
EQ ==
INTLITERAL 1
RPAREN )
LBRACE {
RETURN return
ID binary_gcd
LPAREN (
ID x
COMMA ,
ID y
RLSHIFT >>
INTLITERAL 1
RPAREN )
SEMICOLON ;
RBRACE }
IF if
LPAREN (
ID x
GREAT >
ID y
RPAREN )
LBRACE {
RETURN return
ID binary_gcd
LPAREN (
LPAREN (
ID x
MINUS -
ID y
RPAREN )
RLSHIFT >>
INTLITERAL 1
COMMA ,
ID y
RPAREN )
SEMICOLON ;
RBRACE }
RETURN return
ID binary_gcd
LPAREN (
LPAREN (
ID y
MINUS -
ID x
RPAREN )
RLSHIFT >>
INTLITERAL 1
COMMA ,
ID x
RPAREN )
SEMICOLON ;
RBRACE }
TINT int
ID program
LPAREN (
TINT int
ID argc
COMMA ,
TSTRING string
LBRACKET [
RBRACKET ]
ID argv
RPAREN )
LBRACE {
VAR var
ID x
ASSIGN =
INTLITERAL 21
SEMICOLON ;
VAR var
ID y
ASSIGN =
INTLITERAL 15
SEMICOLON ;
RETURN return
ID binary_gcd
LPAREN (
ID x
COMMA ,
ID y
RPAREN )
SEMICOLON ;
RBRACE }
